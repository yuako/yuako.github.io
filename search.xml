<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>es查询某个字段空或非空</title>
    <url>/posts/586654492/</url>
    <content><![CDATA[<h3 id="查询出没有该字段的文档"><a href="#查询出没有该字段的文档" class="headerlink" title="查询出没有该字段的文档"></a>查询出没有该字段的文档</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET &#123;index&#125;/_count</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;bool&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;must_not&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;exists&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;field&quot;</span>: <span class="string">&quot;字段名称&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="查询字段值为空字符串"><a href="#查询字段值为空字符串" class="headerlink" title="查询字段值为空字符串"></a>查询字段值为空字符串</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET &#123;index&#125;/_count</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;bool&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;must_not&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;wildcard&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;字段名称&quot;</span>: &#123;</span><br><span class="line">              <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;*&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="查询字段值不为空字符串的文档"><a href="#查询字段值不为空字符串的文档" class="headerlink" title="查询字段值不为空字符串的文档"></a>查询字段值不为空字符串的文档</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET &#123;index&#125;/_count</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;wildcard&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;字段名称&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;*&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>elasticsearch</category>
      </categories>
  </entry>
  <entry>
    <title>go-command</title>
    <url>/posts/582908711/</url>
    <content><![CDATA[<h3 id="安装工具"><a href="#安装工具" class="headerlink" title="安装工具"></a>安装工具</h3><h4 id="最简单的方式"><a href="#最简单的方式" class="headerlink" title="最简单的方式"></a>最简单的方式</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go get -u golang.org/x/tool/...</span><br></pre></td></tr></table></figure>

<h4 id="替代方式"><a href="#替代方式" class="headerlink" title="替代方式"></a>替代方式</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ GO111MODULE=on go get golang.org/x/tool/cmd/stress</span><br></pre></td></tr></table></figure>

<h4 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go env</span><br><span class="line">$ go env GOPATH GOO GOARCH</span><br><span class="line">$ go env -w GOPROXY=https://goproxy.cn,direct</span><br><span class="line">$ go <span class="built_in">help</span> environment</span><br></pre></td></tr></table></figure>

<h3 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h3><h4 id="运行代码"><a href="#运行代码" class="headerlink" title="运行代码"></a>运行代码</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go run .                      <span class="comment"># 运行当前目录的包 </span></span><br><span class="line">$ go run ./cmd/foo              <span class="comment"># 运行 ./cmd/foo 目录下的包 获取依赖 </span></span><br><span class="line">$ go get github.com/foo/bar@v1.2.3 </span><br><span class="line">$ go get github.com/foo/bar@8e1b8d3 </span><br><span class="line">$ go list -m all                <span class="comment"># 显示所有依赖 </span></span><br><span class="line">$ go mod why -m golang.org/x/y  <span class="comment"># 为什依赖它？ </span></span><br><span class="line">$ go clean -modcache            <span class="comment"># 清除模块缓存 格式化代码 </span></span><br><span class="line">$ gofmt -d -w -r <span class="string">&#x27;foo -&gt; Foo&#x27;</span> . <span class="comment"># 替换 foo 为 Foo </span></span><br><span class="line">$ gofmt -d -w -r <span class="string">&#x27;strings.Replace(a, b, -1) -&gt; strings.ReplaceAll(a, b)&#x27;</span> . </span><br></pre></td></tr></table></figure>

<h4 id="查看-Go-文档"><a href="#查看-Go-文档" class="headerlink" title="查看 Go 文档"></a>查看 Go 文档</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go doc strings                <span class="comment"># 查看 strings 包的简化版文档 </span></span><br><span class="line">$ go doc -all strings           <span class="comment"># 查看 strings 包的全部文档 </span></span><br><span class="line">$ go doc strings.Replace        <span class="comment"># 查看 strings.Replace 函数的文档 </span></span><br><span class="line">$ go doc sql.DB                 <span class="comment"># 查看 database/sql.DB 类型的文档 </span></span><br><span class="line">$ go doc sql.DB.Query           <span class="comment"># 查看 database/sql.DB.Query 方法的文档 </span></span><br><span class="line">$ go doc -src strings.Replace   <span class="comment"># 查看 strings.Replace 函数的源码</span></span><br></pre></td></tr></table></figure>

<h3 id="Testing"><a href="#Testing" class="headerlink" title="Testing"></a>Testing</h3><h4 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go <span class="built_in">test</span> .                      <span class="comment"># 运行当前目录的所有测试 </span></span><br><span class="line">$ go <span class="built_in">test</span> ./...                  <span class="comment"># 运行当前目录及其子目录的所有测试 </span></span><br><span class="line">$ go <span class="built_in">test</span> ./foo/bar              <span class="comment"># 运行 ./foo/bar 目录的所有测试 </span></span><br><span class="line">$ go <span class="built_in">test</span> -race ./...            <span class="comment"># 启用 race 检测的测试 </span></span><br><span class="line">$ go <span class="built_in">test</span> -count=1 ./...         <span class="comment"># 运行测试时绕过测试缓存 </span></span><br><span class="line">$ go clean -testcache            <span class="comment"># 删除所有缓存的测试结果 </span></span><br><span class="line">$ go <span class="built_in">test</span> -v -run=^TestFooBar$ . <span class="comment"># 运行名称为 TestFooBar 的测试 </span></span><br><span class="line">$ go <span class="built_in">test</span> -v -run=^TestFoo .     <span class="comment"># 运行名称以 TestFoo 开头的测试 </span></span><br><span class="line">$ go <span class="built_in">test</span> -v -run=^TestFooBar$/^Baz$ . <span class="comment"># 仅运行 FooBar 测试下的 Baz 子测试 </span></span><br><span class="line">$ go <span class="built_in">test</span> -short ./...           <span class="comment"># 跳过长时间运行的测试 </span></span><br><span class="line">$ go <span class="built_in">test</span> -failfast ./...        <span class="comment"># 失败后请勿再进行进一步的测试</span></span><br></pre></td></tr></table></figure>

<h4 id="Profiling-Test-Coverage"><a href="#Profiling-Test-Coverage" class="headerlink" title="Profiling Test Coverage"></a>Profiling Test Coverage</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go <span class="built_in">test</span> -cover ./... </span><br><span class="line">$ go <span class="built_in">test</span> -coverprofile=/tmp/profile.out ./...                  <span class="comment"># coverage profile for browser </span></span><br><span class="line">$ go tool cover -html=/tmp/profile.out </span><br><span class="line">$ go <span class="built_in">test</span> -covermode=count -coverprofile=/tmp/profile.out ./... <span class="comment"># coverage with frequency shown </span></span><br><span class="line">$ go tool cover -html=/tmp/profile.out </span><br><span class="line">$ go <span class="built_in">test</span> -coverprofile=/tmp/profile.out ./...                  <span class="comment"># coverage in CLI without any browser </span></span><br><span class="line">$ go tool cover -func=/tmp/profile.out</span><br></pre></td></tr></table></figure>

<h3 id="压力测试"><a href="#压力测试" class="headerlink" title="压力测试"></a>压力测试</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go <span class="built_in">test</span> -run=^TestFooBar$ -count=500 . </span><br><span class="line">$ go <span class="built_in">test</span> -c -o=/tmp/foo.test . <span class="comment"># 使用压力工具 golang.org/x/tools/cmd/stress </span></span><br><span class="line">$ stress -p=4 /tmp/foo.test -test.run=^TestFooBar$</span><br></pre></td></tr></table></figure>

<h4 id="Testing-all-dependencies"><a href="#Testing-all-dependencies" class="headerlink" title="Testing all dependencies"></a>Testing all dependencies</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go <span class="built_in">test</span> all</span><br></pre></td></tr></table></figure>

<h3 id="提交前检查"><a href="#提交前检查" class="headerlink" title="提交前检查"></a>提交前检查</h3><h4 id="格式化代码"><a href="#格式化代码" class="headerlink" title="格式化代码"></a>格式化代码</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gofmt -w -s -d foo.go   <span class="comment"># 格式化 foo.go 文件 </span></span><br><span class="line">$ gofmt -w -s -d .        <span class="comment"># 递归格式化当前目录和子目录所有文件 </span></span><br><span class="line">$ go fmt ./...            <span class="comment"># 另外一种格式化工具，等价 gofmt -l -w ./...</span></span><br></pre></td></tr></table></figure>

<h4 id="通过-vet-进行静态分析"><a href="#通过-vet-进行静态分析" class="headerlink" title="通过 vet 进行静态分析"></a>通过 vet 进行静态分析</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go vet foo.go           <span class="comment"># 检查 foo.go 文件 </span></span><br><span class="line">$ go vet .                <span class="comment"># 检查当前目录下所有文件 </span></span><br><span class="line">$ go vet ./...            <span class="comment"># 检查当前目录及子目录下所有文件 </span></span><br><span class="line">$ go vet ./foo/bar        <span class="comment"># 检查 ./foo/bar 目录下所有文件 </span></span><br><span class="line">$ go vet -composites=<span class="literal">false</span> ./... <span class="comment"># 禁用一些分析器</span></span><br></pre></td></tr></table></figure>

<h4 id="实验性的分析器"><a href="#实验性的分析器" class="headerlink" title="实验性的分析器"></a>实验性的分析器</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /tmp </span><br><span class="line">$ GO111MODULE=on go get golang.org/x/tools/go/analysis/passes/nilness/cmd/nilness </span><br><span class="line">$ GO111MODULE=on go get golang.org/x/tools/go/analysis/passes/shadow/cmd/shadow </span><br><span class="line">$ go vet -vettool=$(<span class="built_in">which</span> nilness) ./...</span><br></pre></td></tr></table></figure>

<h4 id="测试时禁用-vet-工具"><a href="#测试时禁用-vet-工具" class="headerlink" title="测试时禁用 vet 工具"></a>测试时禁用 vet 工具</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go <span class="built_in">test</span> -vet=off ./...</span><br></pre></td></tr></table></figure>

<h4 id="整理代码（LintingCode）"><a href="#整理代码（LintingCode）" class="headerlink" title="整理代码（LintingCode）"></a>整理代码（LintingCode）</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /tmp          <span class="comment"># 安装 linter </span></span><br><span class="line">$ GO111MODULE=on go get golang.org/x/lint/golint </span><br><span class="line">$ golint foo.go    <span class="comment"># Lint the foo.go file </span></span><br><span class="line">$ golint .         <span class="comment"># Lint all files in the current directory </span></span><br><span class="line">$ golint ./...     <span class="comment"># Lint all files in the current directory and sub-directories </span></span><br><span class="line">$ golint ./foo/bar <span class="comment"># Lint all files in the ./foo/bar directory</span></span><br></pre></td></tr></table></figure>

<h4 id="整理和验证依赖"><a href="#整理和验证依赖" class="headerlink" title="整理和验证依赖"></a>整理和验证依赖</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go mod tidy      <span class="comment"># 移除所有未使用过的依赖 </span></span><br><span class="line">$ go mod verify    <span class="comment"># 检查依赖的 hash</span></span><br></pre></td></tr></table></figure>

<h3 id="编译和部署"><a href="#编译和部署" class="headerlink" title="编译和部署"></a>编译和部署</h3><h4 id="编译可执行文件"><a href="#编译可执行文件" class="headerlink" title="编译可执行文件"></a>编译可执行文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go build -o=/tmp/foo .         <span class="comment"># 编译当前目录的包 </span></span><br><span class="line">$ go build -o=/tmp/foo ./cmd/foo <span class="comment"># 编译 ./cmd/foo 目录的包 </span></span><br></pre></td></tr></table></figure>

<h4 id="编译缓存"><a href="#编译缓存" class="headerlink" title="编译缓存"></a>编译缓存</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go env GOCACHE                 <span class="comment"># 检查你的编译缓存存放目录 </span></span><br><span class="line">$ go build -a -o=/tmp/foo .      <span class="comment"># 强制重编译所有包 </span></span><br><span class="line">$ go clean -cache                <span class="comment"># 清除缓存 </span></span><br></pre></td></tr></table></figure>

<h4 id="编译过程"><a href="#编译过程" class="headerlink" title="编译过程"></a>编译过程</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go list -deps . | sort -u      <span class="comment"># 列出用于编译可执行文件的所有包 </span></span><br><span class="line">$ go build -a -x -o=/tmp/foo .   <span class="comment"># 重建所有内容并显示运行的命令 </span></span><br></pre></td></tr></table></figure>

<h4 id="交叉编译"><a href="#交叉编译" class="headerlink" title="交叉编译"></a>交叉编译</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ GOOS=linux GOARCH=amd64 go build -o=/tmp/linux_amd64/foo . </span><br><span class="line">$ GOOS=windows GOARCH=amd64 go build -o=/tmp/windows_amd64/foo.exe . </span><br><span class="line">$ go tool dist list              <span class="comment"># 列出所有支持的操作系统和CPU架构</span></span><br></pre></td></tr></table></figure>

<h4 id="使用编译器和链接器-flags"><a href="#使用编译器和链接器-flags" class="headerlink" title="使用编译器和链接器 flags"></a>使用编译器和链接器 flags</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go tool compile -<span class="built_in">help</span>                       <span class="comment"># 查看编译器可用的 flag </span></span><br><span class="line">$ go build -gcflags=<span class="string">&quot;-m -m&quot;</span> -o=/tmp/foo .     <span class="comment"># 打印有关优化决策的信息 </span></span><br><span class="line">$ go build -gcflags=<span class="string">&quot;all=-m&quot;</span> -o=/tmp/foo .    <span class="comment"># 打印包括依赖的优化决策信息 </span></span><br><span class="line">$ go build -gcflags=<span class="string">&quot;all=-N -l&quot;</span> -o=/tmp/foo . <span class="comment"># 禁用优化和内联 </span></span><br><span class="line">$ go tool link -<span class="built_in">help</span>                          <span class="comment"># 查看链接器可用的 flag </span></span><br><span class="line">$ go build -ldflags=<span class="string">&quot;-X main.version=1.2.3&quot;</span> -o=/tmp/foo . <span class="comment"># 增加版本信息 </span></span><br><span class="line">$ go build -ldflags=<span class="string">&quot;-s -w&quot;</span> -o=/tmp/foo .                 <span class="comment"># 从二进制文件中删除调试信息 </span></span><br><span class="line">$ CGO_ENABLE=0 GOOS=linux go build -a -ldflags <span class="string">&#x27;-extldflags &quot;-static&quot;&#x27;</span> . <span class="comment"># 使二进制文件尽可能静态</span></span><br></pre></td></tr></table></figure>

<h3 id="问题诊断和优化"><a href="#问题诊断和优化" class="headerlink" title="问题诊断和优化"></a>问题诊断和优化</h3><h4 id="运行和比较基准测试"><a href="#运行和比较基准测试" class="headerlink" title="运行和比较基准测试"></a>运行和比较基准测试</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go <span class="built_in">test</span> -bench=. ./...                                  <span class="comment"># 运行所有测试和基准测试 </span></span><br><span class="line">$ go <span class="built_in">test</span> -run=^$ -bench=. ./...                          <span class="comment"># 只运行所有的基准测试 </span></span><br><span class="line">$ go <span class="built_in">test</span> -run=^$ -bench=^BenchmarkFoo$ ./...             <span class="comment"># 只运行 BenchmarkFoo 基准测试 </span></span><br><span class="line">$ go <span class="built_in">test</span> -bench=. -benchmem ./...                        <span class="comment"># 强制将内存分配统计信息包含在输出中 </span></span><br><span class="line">$ go <span class="built_in">test</span> -bench=. -benchtime=5s ./...                    <span class="comment"># 运行每个基准测试至少5秒钟 </span></span><br><span class="line">$ go <span class="built_in">test</span> -bench=. -benchtime=500x ./...                  <span class="comment"># 保证每个基准测试精确进行500次迭代 </span></span><br><span class="line">$ go <span class="built_in">test</span> -bench=. -count=3 ./...                         <span class="comment"># 重复每个基准测试3次 </span></span><br><span class="line">$ go <span class="built_in">test</span> -bench=. -cpu=1,4,8 ./....                      <span class="comment"># 将GOMAXPROCS设置为1、4和8运行基准测试 </span></span><br></pre></td></tr></table></figure>

<h4 id="比较基准测试的变化"><a href="#比较基准测试的变化" class="headerlink" title="比较基准测试的变化"></a>比较基准测试的变化</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /tmp                                                 <span class="comment"># 安装 benchcmp 工具 </span></span><br><span class="line">$ GO111MODULE=on go get golang.org/x/tools/cmd/benchcmp </span><br><span class="line">$ go <span class="built_in">test</span> -run=^$ -bench=. -benchmem ./... &gt; /tmp/old.txt <span class="comment"># 进行一些修改、优化 </span></span><br><span class="line">$ go <span class="built_in">test</span> -run=^$ -bench=. -benchmem ./... &gt; /tmp/new.txt </span><br><span class="line">$ benchcmp /tmp/old.txt /tmp/new.txt</span><br></pre></td></tr></table></figure>

<h3 id="Profiling-and-Tracing"><a href="#Profiling-and-Tracing" class="headerlink" title="Profiling and Tracing"></a>Profiling and Tracing</h3><h4 id="运行和比较基准测试-1"><a href="#运行和比较基准测试-1" class="headerlink" title="运行和比较基准测试"></a>运行和比较基准测试</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go <span class="built_in">test</span> -run=^$ -bench=^BenchmarkFoo$ -cpuprofile=/tmp/cpuprofile.out . </span><br><span class="line">$ go <span class="built_in">test</span> -run=^$ -bench=^BenchmarkFoo$ -memprofile=/tmp/memprofile.out . </span><br><span class="line">$ go <span class="built_in">test</span> -run=^$ -bench=^BenchmarkFoo$ -blockprofile=/tmp/blockprofile.out . </span><br><span class="line">$ go <span class="built_in">test</span> -run=^$ -bench=^BenchmarkFoo$ -mutexprofile=/tmp/mutexprofile.out . </span><br><span class="line">$ go <span class="built_in">test</span> -run=^$ -bench=^BenchmarkFoo$ -o=/tmp/foo.test -cpuprofile=/tmp/cpuprofile.out . </span><br><span class="line">$ go tool pprof -http=:5000 /tmp/cpuprofile.out                    <span class="comment"># 在浏览器中审查 </span></span><br><span class="line">$ go tool pprof --nodefraction=0.1 -http=:5000 /tmp/cpuprofile.out <span class="comment"># 忽略小于 10% 的节点</span></span><br></pre></td></tr></table></figure>

<h4 id="Tracing-生成"><a href="#Tracing-生成" class="headerlink" title="Tracing 生成"></a>Tracing 生成</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go <span class="built_in">test</span> -run=^$ -bench=^BenchmarkFoo$ -trace=/tmp/trace.out . </span><br><span class="line">$ go tool trace /tmp/trace.out <span class="comment"># 目前只在 Chrome/Chromium 可用</span></span><br></pre></td></tr></table></figure>

<h4 id="竞态条件检查"><a href="#竞态条件检查" class="headerlink" title="竞态条件检查"></a>竞态条件检查</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go build -race -o=/tmp/foo .         <span class="comment"># 别用于生产环境 </span></span><br><span class="line">$ GORACE=<span class="string">&quot;log_path=/tmp/race&quot;</span> /tmp/foo <span class="comment"># 输出到文件而不是标准错误</span></span><br></pre></td></tr></table></figure>

<h3 id="依赖管理（Module）"><a href="#依赖管理（Module）" class="headerlink" title="依赖管理（Module）"></a>依赖管理（Module）</h3><h4 id="项目依赖更新"><a href="#项目依赖更新" class="headerlink" title="项目依赖更新"></a>项目依赖更新</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go list -m -u github.com/alecthomas/chroma  <span class="comment"># 检查该库是否有新版本 </span></span><br><span class="line">$ go list -m -u all                           <span class="comment"># 更新项目所有依赖 </span></span><br></pre></td></tr></table></figure>

<h4 id="依赖升级或降级"><a href="#依赖升级或降级" class="headerlink" title="依赖升级或降级"></a>依赖升级或降级</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go get github.com/foo/bar@latest            <span class="comment"># 最新版本 </span></span><br><span class="line">$ go get github.com/foo/bar@v1.2.3            <span class="comment"># 特定版本 v1.2.3 </span></span><br><span class="line">$ go get github.com/foo/bar@7e0369f           <span class="comment"># 到特定提交 </span></span><br></pre></td></tr></table></figure>

<h4 id="运行所有包的全部测试检验不兼容性"><a href="#运行所有包的全部测试检验不兼容性" class="headerlink" title="运行所有包的全部测试检验不兼容性"></a>运行所有包的全部测试检验不兼容性</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go mod tidy $ go <span class="built_in">test</span> all</span><br></pre></td></tr></table></figure>

<h4 id="使用依赖的本地版本"><a href="#使用依赖的本地版本" class="headerlink" title="使用依赖的本地版本"></a>使用依赖的本地版本</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go mod edit -replace=github.com/alexedwards/argon2id=/home/alex/code/argon2id <span class="comment"># 创建 replace 规则 </span></span><br><span class="line">$ go mod edit -dropreplace=github.com/alexedwards/argon2id                      <span class="comment"># 删除 replace 规则</span></span><br></pre></td></tr></table></figure>

<h3 id="其他工具"><a href="#其他工具" class="headerlink" title="其他工具"></a>其他工具</h3><h4 id="升级代码到-Go-新版本"><a href="#升级代码到-Go-新版本" class="headerlink" title="升级代码到 Go 新版本"></a>升级代码到 Go 新版本</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go fix ./... </span><br></pre></td></tr></table></figure>

<h4 id="报告-Bug"><a href="#报告-Bug" class="headerlink" title="报告 Bug"></a>报告 Bug</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go bug <span class="comment"># 会打开浏览器，定位 Go 代码仓库的 issue 页面</span></span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>go-context</title>
    <url>/posts/1311315085/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>golang关键字defer使用</title>
    <url>/posts/4082217715/</url>
    <content><![CDATA[<h3 id="defer关键词规则"><a href="#defer关键词规则" class="headerlink" title="defer关键词规则"></a>defer关键词规则</h3><ul>
<li>规则一：延迟函数的参数在defer语句出现时就已经确定下来了（因为会有拷贝）</li>
<li>规则二：延迟函数执行按后进先出顺序执行，即先出现的defer最后执行（filo，栈操作）</li>
<li>规则三：延迟函数可能操作主函数的”具名”返回值<ul>
<li>对于指针类型参数，规则仍然适用，只不过延迟函数的参数是一个地址值，</li>
<li>这种情况下，defer后面的语句对变量的修改可能会影响延迟函数。</li>
</ul>
</li>
</ul>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">variableDemo1</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++ &#123;</span><br><span class="line">		<span class="comment">//i会进行一次拷贝到t，所以能正常打印数据</span></span><br><span class="line">		<span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">(t <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">			fmt.Printf(<span class="string">&quot;t = %d \n&quot;</span>, t)</span><br><span class="line">		&#125;(i)</span><br><span class="line"></span><br><span class="line">		<span class="comment">//这里只会输出6，因为i在defer已经执行完循环，i指向都是最终值</span></span><br><span class="line">		<span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">			fmt.Printf(<span class="string">&quot;t2 = %d \n&quot;</span>, i)</span><br><span class="line">		&#125;()</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回前执行defer，此时t=2，++后返回3</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">returnVariableDemo1</span><span class="params">()</span> <span class="params">(t <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		t++</span><br><span class="line">	&#125;()</span><br><span class="line">	<span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回前执行defer，但是无法赋值结果，无返回t变量，返回的是2</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">returnVariableDemo2</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	t := <span class="number">2</span></span><br><span class="line">	<span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		t++</span><br><span class="line">	&#125;()</span><br><span class="line">	<span class="keyword">return</span> t</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">variableDemo2</span><span class="params">()</span> <span class="params">(t <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	<span class="comment">//这里传入的t是初始值只0，defer开始时就拷贝0到i，第二个输出t是ret前赋值为2，所以是2</span></span><br><span class="line">	<span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;variableDemo2 i = &quot;</span>, i) <span class="comment">// 0</span></span><br><span class="line">		fmt.Println(<span class="string">&quot;variableDemo2 t = &quot;</span>, t) <span class="comment">// 2</span></span><br><span class="line">	&#125;(t)</span><br><span class="line">	t = <span class="number">1</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>defer</tag>
      </tags>
  </entry>
  <entry>
    <title>java中Map遍历的四种方法</title>
    <url>/posts/1314230304/</url>
    <content><![CDATA[<p>在java中所有的map都实现了Map接口，因此所有的Map（如HashMap, TreeMap, LinkedHashMap, Hashtable等）都可以用以下的方式去遍历。</p>
<p>方法一：在for循环中使用entries实现Map的遍历：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 最常见也是大多数情况下用的最多的，一般在键值对都需要使用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Map &lt;String,String&gt;map = <span class="keyword">new</span> HashMap&lt;String,String&gt;();</span><br><span class="line">map.put(<span class="string">&quot;熊大&quot;</span>, <span class="string">&quot;棕色&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;熊二&quot;</span>, <span class="string">&quot;黄色&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(Map.Entry&lt;String, String&gt; entry : map.entrySet())&#123;</span><br><span class="line">    String mapKey = entry.getKey();</span><br><span class="line">    String mapValue = entry.getValue();</span><br><span class="line">    System.out.println(mapKey+<span class="string">&quot;:&quot;</span>+mapValue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方法二：在for循环中遍历key或者values，一般适用于只需要map中的key或者value时使用，在性能上比使用entrySet较好；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map &lt;String,String&gt;map = <span class="keyword">new</span> HashMap&lt;String,String&gt;();</span><br><span class="line">map.put(<span class="string">&quot;熊大&quot;</span>, <span class="string">&quot;棕色&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;熊二&quot;</span>, <span class="string">&quot;黄色&quot;</span>);</span><br><span class="line"><span class="comment">//key</span></span><br><span class="line"><span class="keyword">for</span>(String key : map.keySet())&#123;</span><br><span class="line">    System.out.println(key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//value</span></span><br><span class="line"><span class="keyword">for</span>(String value : map.values())&#123;</span><br><span class="line">    System.out.println(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方法三：通过Iterator遍历；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Iterator&lt;Entry&lt;String, String&gt;&gt; entries = map.entrySet().iterator();</span><br><span class="line"><span class="keyword">while</span>(entries.hasNext())&#123;</span><br><span class="line">    Entry&lt;String, String&gt; entry = entries.next();</span><br><span class="line">    String key = entry.getKey();</span><br><span class="line">    String value = entry.getValue();</span><br><span class="line">    System.out.println(key+<span class="string">&quot;:&quot;</span>+value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方法四：通过键找值遍历，这种方式的效率比较低，因为本身从键取值是耗时的操作；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(String key : map.keySet())&#123;</span><br><span class="line">    String value = map.get(key);</span><br><span class="line">    System.out.println(key+<span class="string">&quot;:&quot;</span>+value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>map</tag>
      </tags>
  </entry>
  <entry>
    <title>缓存系统的三大问题</title>
    <url>/posts/173324241/</url>
    <content><![CDATA[<h3 id="一、缓存穿透"><a href="#一、缓存穿透" class="headerlink" title="一、缓存穿透"></a>一、缓存穿透</h3><ul>
<li>数据库和缓存中都没有数据，用户每次查询都查询数据库但是没法写入到缓存</li>
<li>查询的KEY不存在，例如id:-1</li>
</ul>
<h4 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h4><ul>
<li>过滤不正常的参数key</li>
<li>将查询空的结果设置短时间的key-null缓存</li>
</ul>
<h3 id="二、缓存击穿"><a href="#二、缓存击穿" class="headerlink" title="二、缓存击穿"></a>二、缓存击穿</h3><ul>
<li>数据库中有数据，但是缓存没有，首次请求或者是缓存的KEY过期</li>
</ul>
<h4 id="解决方法：-1"><a href="#解决方法：-1" class="headerlink" title="解决方法："></a>解决方法：</h4><ul>
<li>限流、熔断、降级</li>
<li>key不过期（注意使用）</li>
<li>佈隆过滤器，快速查询key是否存在</li>
<li>互斥锁（常用）</li>
</ul>
<h3 id="三、缓存雪崩"><a href="#三、缓存雪崩" class="headerlink" title="三、缓存雪崩"></a>三、缓存雪崩</h3><ul>
<li>缓存中大批量数据过期</li>
</ul>
<h4 id="解决方法：-2"><a href="#解决方法：-2" class="headerlink" title="解决方法："></a>解决方法：</h4><ul>
<li>缓存数据随机时间</li>
<li>分散缓存到不同缓存系统</li>
<li>key不过期</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">(String key, Callable&lt;? extends T&gt; loader)</span> </span>&#123;</span><br><span class="line">    String cache = redisHelper.get(key);</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isNotBlank(cache)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;null&quot;</span>.equals(cache)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> JSONObject.parseObject(cache, <span class="keyword">this</span>.entityClass);</span><br><span class="line">    &#125;</span><br><span class="line">    String lockKey = <span class="string">&quot;lock:&quot;</span> + key;</span><br><span class="line">    String lockVal = String.valueOf(RandomUtils.nextInt(<span class="number">1000</span>, <span class="number">9999</span>));</span><br><span class="line">    <span class="comment">//通过加锁防止击穿</span></span><br><span class="line">    <span class="keyword">if</span> (redisHelper.lock(lockKey, lockVal, CustomSystemTime.THREE_SECOND, TimeUnit.SECONDS)) &#123;</span><br><span class="line">        T entity = loader.call();</span><br><span class="line">        <span class="keyword">if</span> (entity != <span class="keyword">null</span>) &#123;</span><br><span class="line">            redisHelper.set(key, JsonHelper.toJson(entity), CustomSystemTime.ONEHOURSECONDS);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//防止缓存穿透</span></span><br><span class="line">            redisHelper.set(key, <span class="string">&quot;null&quot;</span>, CustomSystemTime.THREE_SECOND);</span><br><span class="line">        &#125;</span><br><span class="line">        redisHelper.unlock(lockKey, lockVal);</span><br><span class="line">        <span class="keyword">return</span> entity;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        TimeUnit.MILLISECONDS.sleep(RandomUtils.nextInt(<span class="number">100</span>, <span class="number">200</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.get(key, loader);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
        <tag>cache</tag>
      </tags>
  </entry>
</search>
